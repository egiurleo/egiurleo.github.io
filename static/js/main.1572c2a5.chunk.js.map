{"version":3,"sources":["Header/index.js","Container/index.js","Home/index.js","Links.js","Projects/index.js","Speaking/index.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","Container","children","Home","Links","linkHTML","links","map","link","url","text","join","dangerouslySetInnerHTML","__html","Projects","data","projects","project","key","title","src","image","alt","description","Speaking","speaking","talk","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m9IAqCeA,MAlCf,WACE,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,SACZ,uBAAGC,KAAK,IAAIC,OAAO,SAAnB,gBACe,0BAAMF,UAAU,UAAhB,OAIjB,yBAAKA,UAAU,OACb,2BACE,uBAAGC,KAAK,YAAYC,OAAO,SAA3B,aAIF,2BACE,uBAAGD,KAAK,YAAYC,OAAO,SAA3B,aAIF,2BACE,uBACED,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAHN,Y,MCNKC,MAdf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBAAKL,UAAU,aAEb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,YACZK,M,aC8BIC,MApCf,WACE,OACE,yBAAKN,UAAU,YACb,kBAAC,EAAD,KACE,yBAAKA,UAAU,SACb,qEAC0C,IACxC,uBAAGC,KAAK,sCAAR,oBAFF,KAKA,mEACwC,IACtC,uBAAGA,KAAK,qBAAR,UAFF,+FAGuD,IACrD,uBAAGA,KAAK,uBAAR,WAJF,OAIgD,IAC9C,uBAAGA,KAAK,0BAAR,cALF,0DAKwG,uBAAGA,KAAK,mBAAR,OALxG,KAQA,gKAE4C,uBAAGA,KAAK,sBAAR,UAF5C,kCAMA,kEACuC,IACrC,uBAAGA,KAAK,oCAAR,WAFF,IAE0D,IACxD,uBAAGA,KAAK,oCAAR,YAHF,OAG8D,IAC5D,uBAAGA,KAAK,+BAAR,UAJF,SCnBKM,MARf,YAA2B,IACrBC,EADoB,EAATC,MAEZC,KAAI,SAACC,GAAD,wBAAqBA,EAAKC,IAA1B,YAAiCD,EAAKE,KAAtC,WACJC,KAAK,YAER,OAAO,uBAAGC,wBAAyB,CAAEC,OAAQR,M,MCwBhCS,MAzBf,WACE,OACE,kBAAC,EAAD,KACE,wCACA,yBAAKjB,UAAU,YACZkB,EAAKC,SAAST,KAAI,SAACU,GAClB,OACE,yBAAKpB,UAAU,UAAUqB,IAAKD,EAAQE,OACpC,yBAAKC,IAAG,kBAAaH,EAAQI,OAASC,IAAKL,EAAQE,QACnD,yBAAKtB,UAAU,0BACX,4BAAKoB,EAAQE,OACf,uBACEtB,UAAU,cACVe,wBAAyB,CAAEC,OAAQI,EAAQM,eAE7C,kBAAC,EAAD,CAAOjB,MAAOW,EAAQX,gB,MCKvBkB,MApBf,WACE,OACE,kBAAC,EAAD,KACE,wCACA,yBAAK3B,UAAU,YACZkB,EAAKU,SAASlB,KAAI,SAACmB,GAAD,OACjB,yBAAK7B,UAAU,OAAOqB,IAAKQ,EAAKP,OAC9B,yBAAKC,IAAG,kBAAaM,EAAKL,OAASC,IAAKI,EAAKP,QAC7C,yBAAKtB,UAAU,kBACb,4BAAK6B,EAAKP,OACV,2BAAIO,EAAKH,aACT,kBAAC,EAAD,CAAOjB,MAAOoB,EAAKpB,gB,eCLbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,IAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,IAAOC,UAAWnC,IACnC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAI,YAAeC,UAAWxB,IAC3C,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAI,YAAeC,UAAWd,KAE7Ce,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1572c2a5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1 className=\"title\">\n        <a href=\"/\" target=\"_self\">\n          Emily Giurleo<span className=\"cursor\">_</span>\n        </a>\n      </h1>\n\n      <div className=\"nav\">\n        <p>\n          <a href=\"/projects\" target=\"_self\">\n            projects\n          </a>\n        </p>\n        <p>\n          <a href=\"/speaking\" target=\"_self\">\n            speaking\n          </a>\n        </p>\n        <p>\n          <a\n            href=\"https://dev.to/emilygiurleo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            blog\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Header from \"../Header\";\nimport \"./styles.css\";\n\nfunction Container({ children }) {\n  return (\n    <div className=\"container\">\n      {/* <div className=\"sidebar\"></div> */}\n      <div className=\"content\">\n        <Header />\n        <div className=\"children\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Container;\n","import React from \"react\";\nimport Container from \"../Container\";\nimport data from \"../data.json\";\nimport \"./styles.css\";\n\nfunction Home() {\n  return (\n    <div className=\"new-home\">\n      <Container>\n        <div className=\"about\">\n          <p>\n            Hey, there! My name is Emily, and I use{\" \"}\n            <a href=\"https://www.mypronouns.org/she-her\">she/her pronouns</a>.\n          </p>\n\n          <p>\n            I am currently a software engineer at{\" \"}\n            <a href=\"https://numero.ai\">Numero</a>, where I help build financial products\n            for political campaigns. I have previously worked at{\" \"}\n            <a href=\"https://mongodb.com\">MongoDB</a> and{\" \"}\n            <a href=\"https://codecademy.com\">Codecademy</a>. Before that, I got a degree in Computer Science from <a href=\"https://mit.edu\">MIT</a>.\n          </p>\n\n          <p>\n            I'm super passionate about Ruby and civic engagement. In my spare time, you can find me\n            reading fantasy novels, writing code with <a href=\"https://ragtag.org\">Ragtag</a>, or \n            hanging out with my pets.\n          </p>\n\n          <p>\n            Feel free to get in touch with me on{\" \"}\n            <a href=\"https://twitter.com/EmilyGiurleo\">Twitter</a>,{\" \"}\n            <a href=\"https://linkedin.com/in/egiurleo\">LinkedIn</a>, or{\" \"}\n            <a href=\"https://github.com/egiurleo\">GitHub</a>.\n          </p>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction Links({ links }) {\n  let linkHTML = links\n    .map((link) => `<a href=${link.url}>${link.text}</a>`)\n    .join(\" â€¢ \");\n\n  return <p dangerouslySetInnerHTML={{ __html: linkHTML }} />;\n}\n\nexport default Links;\n","import React from \"react\";\nimport Container from \"../Container\";\nimport Links from '../Links';\nimport data from \"../data.json\";\nimport \"./styles.css\";\n\nfunction Projects() {\n  return (\n    <Container>\n      <h2>Projects</h2>\n      <div className=\"projects\">\n        {data.projects.map((project) => {\n          return (\n            <div className=\"project\" key={project.title}>\n              <img src={`/images/${project.image}`} alt={project.title} />\n              <div className=\"project-text-container\">\n                  <h3>{project.title}</h3>\n                <p\n                  className=\"description\"\n                  dangerouslySetInnerHTML={{ __html: project.description }}\n                />\n                <Links links={project.links} />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Container>\n  );\n}\n\nexport default Projects;\n","import React from \"react\";\nimport Container from \"../Container\";\nimport Links from \"../Links\";\nimport data from \"../data.json\";\nimport \"./styles.css\";\n\nfunction Speaking() {\n  return (\n    <Container>\n      <h2>Speaking</h2>\n      <div className=\"speaking\">\n        {data.speaking.map((talk) => (\n          <div className=\"talk\" key={talk.title}>\n            <img src={`/images/${talk.image}`} alt={talk.title} />\n            <div className=\"talk-container\">\n              <h3>{talk.title}</h3>\n              <p>{talk.description}</p>\n              <Links links={talk.links} />\n            </div>\n          </div>\n        ))}\n      </div>\n    </Container>\n  );\n}\n\nexport default Speaking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport Projects from \"./Projects\";\nimport Speaking from \"./Speaking\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route exact path={`/`} component={Home} />\n    <Route exact path={`/projects`} component={Projects} />\n    <Route exact path={`/speaking`} component={Speaking} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}